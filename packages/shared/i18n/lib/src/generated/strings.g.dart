// NOTE: This file is a placeholder and should be generated by slang_build_runner
// Run 'dart run melos gen:i18n' to generate the actual file

import 'package:flutter/widgets.dart';

class Translations {
  final String localeName;

  Translations(this.localeName);

  static Translations of(BuildContext context) {
    return Translations(Localizations.localeOf(context).toString());
  }

  AppSection get app => AppSection();
  CommonSection get common => CommonSection();
  SettingsSection get settings => SettingsSection();
  AuthSection get auth => AuthSection();
  HomeSection get home => HomeSection();
  ErrorsSection get errors => ErrorsSection();
}

class AppSection {
  String get title => "Flutter App Template";
  String get welcome => "Welcome to Flutter App Template";
}

class CommonSection {
  String get ok => "OK";
  String get cancel => "Cancel";
  String get confirm => "Confirm";
  String get yes => "Yes";
  String get no => "No";
  String get save => "Save";
  String get delete => "Delete";
  String get edit => "Edit";
  String get loading => "Loading...";
  String get search => "Search";
}

class SettingsSection {
  String get title => "Settings";
  String get theme => "Theme";
  String get language => "Language";
  String get darkMode => "Dark Mode";
  String get notifications => "Notifications";
  String get about => "About";
  String get version => "Version";
}

class AuthSection {
  String get login => "Login";
  String get logout => "Logout";
  String get register => "Register";
  String get email => "Email";
  String get password => "Password";
  String get forgotPassword => "Forgot Password?";
  String get createAccount => "Create Account";
}

class HomeSection {
  String get title => "Home";
  String get welcome => "Welcome to the app";
}

class ErrorsSection {
  String get unknown => "Unknown error occurred";
  String get connection => "Connection error";
  String get timeout => "Request timeout";
  String get invalidCredentials => "Invalid email or password";
  String required(String field) => "$field is required";
}

// TranslationDelegate for use with MaterialApp
class TranslationDelegate extends LocalizationsDelegate<dynamic> {
  const TranslationDelegate();

  @override
  bool isSupported(Locale locale) => true;

  @override
  Future<dynamic> load(Locale locale) async {
    return Translations(locale.toString());
  }

  @override
  bool shouldReload(TranslationDelegate old) => false;
}
